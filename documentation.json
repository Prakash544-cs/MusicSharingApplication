{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-70d0166e53691a4839a0ff5852bf5b80",
            "file": "src/app/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector } from '@ngrx/store';\r\nimport * as auth from './reducers/auth.reducers';\r\n\r\nimport * as music from './reducers/music.reducers';\r\n\r\nexport interface AppState {\r\n  music: any;\r\n  authState: auth.State;\r\n  musicState:music.State\r\n}\r\n\r\n\r\nexport const reducers = {\r\n    auth: auth.reducer,\r\n    music:music.musicReducer\r\n  };\r\n\r\n  export const selectAuthState = createFeatureSelector<AppState>('auth');\r\n  export const selectMusicState = createFeatureSelector<AppState>('music');",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "music",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "musicState",
                    "type": "music.State",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Music",
            "id": "interface-Music-3881006e8d1fe4125772cdb2da8669e8",
            "file": "src/app/models/music.ts",
            "type": "interface",
            "sourceCode": "export interface Music {\r\n    id?: number;\r\n    song: string;\r\n    movie: string;\r\n    //status: number;\r\n  }\r\n  ",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "movie",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "song",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-f3cf04122654d3205b780a261a505d5d",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User } from '../../models/user';\r\nimport { AuthActionTypes, All } from '../actions/auth.actions';\r\n\r\n\r\nexport interface State {\r\n  isAuthenticated: boolean;\r\n  user: User | null;\r\n  errorMessage: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n    isAuthenticated: false,\r\n    user: null,\r\n    errorMessage: null\r\n  };\r\n\r\n  export function reducer(state = initialState, action: All): State {\r\n    switch (action.type) {\r\n      case AuthActionTypes.LOGIN_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          user: {\r\n            token: action.payload.token,\r\n            email: action.payload.email\r\n          },\r\n          errorMessage: null\r\n        };\r\n      }\r\n      case AuthActionTypes.LOGIN_FAILURE: {\r\n        return {\r\n          ...state,\r\n          errorMessage: 'Incorrect email and/or password.'\r\n        };\r\n      }\r\n      case AuthActionTypes.SIGNUP_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          user: {\r\n            token: action.payload.token,\r\n            email: action.payload.email\r\n          },\r\n          errorMessage: null\r\n        };\r\n      }\r\n      case AuthActionTypes.LOGOUT: {\r\n        return initialState;\r\n      }\r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n\r\n  ",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-4126bbfeb9b2bf7c02c4bfda7bf03096-1",
            "file": "src/app/store/reducers/music.reducers.ts",
            "type": "interface",
            "sourceCode": "import { Music } from '../../models/music';\r\nimport { LIST_MUSICS, \r\n  LIST_DATA_SUCCESS, MusicsActions, \r\n  ADD_MUSICS, UPDATE_MUSICS ,DELETE_MUSICS ,\r\n  DELETE_MUSIC_SUCCESS, UPDATE_MUSIC_SUCCESS}  from '../actions/music.actions';\r\n\r\nexport interface State {\r\n  musics: Music[];\r\n  user: Music | null;\r\n\r\n}\r\n\r\nconst initialState: State = {\r\n    musics: [],\r\n    user: null\r\n  \r\n};\r\n\r\nexport function musicReducer(\r\n  state = initialState,\r\n  action: MusicsActions\r\n)\r\n\r\n{\r\n    \r\n  switch (action.type) {\r\n    \r\n    case LIST_MUSICS:\r\n      return {\r\n        ...state,\r\n        musics: [...state.musics]\r\n      };\r\n      case LIST_DATA_SUCCESS: {\r\n        return {\r\n            musics: action.payload,\r\n          message: null\r\n        };\r\n      }\r\n      case ADD_MUSICS: {\r\n          return {\r\n              ...state\r\n          }\r\n        }\r\n      case UPDATE_MUSICS: {\r\n            return {\r\n                    ...state\r\n            };\r\n          }\r\n      case DELETE_MUSICS: {\r\n        return {\r\n                ...state\r\n            };\r\n      }   \r\n\r\n      case DELETE_MUSIC_SUCCESS: {\r\n        return {\r\n         ...state,\r\n        };\r\n        }\r\n        case UPDATE_MUSIC_SUCCESS: {\r\n          return {\r\n           ...state,\r\n            message: 'The Music is updated successfully!',\r\n            added: true\r\n          };\r\n          }\r\n     default:\r\n      return state;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "musics",
                    "type": "Music[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user",
                    "type": "Music | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "Theme",
            "id": "interface-Theme-f7fb9c425b0a9834bc381fb5d1ffc6e2",
            "file": "src/app/theme-color.ts",
            "type": "interface",
            "sourceCode": "export interface Theme {\r\n    name: string;\r\n    properties: any;\r\n  }\r\n  \r\n  export const light: Theme = {\r\n    name: 'light',\r\n    properties: {\r\n      '--background-default': '#F4FAFF',\r\n      '--primary-default': '#000000',\r\n      '--popup-default': '#000000',\r\n    }\r\n  };\r\n  \r\n  export const dark: Theme = {\r\n    name: 'dark',\r\n    properties: {\r\n      '--background-default': '#797C80',\r\n      '--primary-default': '#ffffff',\r\n      '--popup-default': '#000000',\r\n    }\r\n  };",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "properties",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-2f00a9579fa69dab68e96d565844bfcc",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\r\nofType(AuthActionTypes.LOGIN)).pipe(\r\n    map((action: LogIn) => action.payload)).pipe(switchMap(payload => {\r\n    return this.authService.logIn(payload.email, payload.password).pipe(\r\n        map((user) => {\r\n        console.log(user);\r\n        return new LogInSuccess({token: user.token, email: payload.email});\r\n      })).pipe(catchError((error) => {\r\n        console.log(error);\r\n        return of(new LogInFailure({ error: error }));\r\n      }));\r\n  }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n  ofType(AuthActionTypes.LOGIN_FAILURE)\r\n)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n  ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n  tap((user) => {\r\n      localStorage.setItem('token', user.payload.token);\r\n      this.router.navigateByUrl('/list-music');\r\n  })\r\n)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogOut",
                    "defaultValue": "this.actions.pipe(\r\n  ofType(AuthActionTypes.LOGOUT),\r\n  tap((user) => {\r\n    localStorage.removeItem('token');\r\n  })\r\n)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(ofType(AuthActionTypes.SIGNUP)).pipe(\r\n  map((action: SignUp) => action.payload)).pipe(\r\n  switchMap(payload => {\r\n    return this.authService.signUp(payload.email, payload.password).pipe(\r\n      map((user) => {\r\n        console.log(user);\r\n        return new SignUpSuccess({token: user.token, email: payload.email});\r\n      })).pipe(catchError((error) => {\r\n        console.log(error);\r\n        return of(new SignUpFailure({ error: error }));\r\n      }));\r\n  }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\r\n  ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n  tap((user) => {\r\n    localStorage.setItem('token', user.payload.token);\r\n    this.router.navigateByUrl('/');\r\n  })\r\n)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { switchMap, concatMap } from 'rxjs/operators';\r\nimport { createEffect,Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { tap , map, catchError } from 'rxjs/operators';\r\nimport {  of } from 'rxjs';\r\n\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\nimport {\r\n    AuthActionTypes,\r\n    LogIn, LogInSuccess , LogInFailure, SignUp , SignUpSuccess , SignUpFailure,\r\n     LogOut\r\n  } from '../actions/auth.actions';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n\r\n  constructor(\r\n    private actions: Actions,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n\r\n@Effect()\r\nLogIn: Observable<any> = this.actions.pipe(\r\nofType(AuthActionTypes.LOGIN)).pipe(\r\n    map((action: LogIn) => action.payload)).pipe(switchMap(payload => {\r\n    return this.authService.logIn(payload.email, payload.password).pipe(\r\n        map((user) => {\r\n        console.log(user);\r\n        return new LogInSuccess({token: user.token, email: payload.email});\r\n      })).pipe(catchError((error) => {\r\n        console.log(error);\r\n        return of(new LogInFailure({ error: error }));\r\n      }));\r\n  }));\r\n\r\n  @Effect({ dispatch: false })\r\n  LogInSuccess: Observable<any> = this.actions.pipe(\r\n  ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n  tap((user) => {\r\n      localStorage.setItem('token', user.payload.token);\r\n      this.router.navigateByUrl('/list-music');\r\n  })\r\n);\r\n\r\n@Effect({ dispatch: false })\r\nLogInFailure: Observable<any> = this.actions.pipe(\r\n  ofType(AuthActionTypes.LOGIN_FAILURE)\r\n); \r\n\r\n\r\n@Effect()\r\nSignUp: Observable<any> = this.actions.pipe(ofType(AuthActionTypes.SIGNUP)).pipe(\r\n  map((action: SignUp) => action.payload)).pipe(\r\n  switchMap(payload => {\r\n    return this.authService.signUp(payload.email, payload.password).pipe(\r\n      map((user) => {\r\n        console.log(user);\r\n        return new SignUpSuccess({token: user.token, email: payload.email});\r\n      })).pipe(catchError((error) => {\r\n        console.log(error);\r\n        return of(new SignUpFailure({ error: error }));\r\n      }));\r\n  }));\r\n\r\n\r\n@Effect({ dispatch: false })\r\nSignUpSuccess: Observable<any> = this.actions.pipe(\r\n  ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n  tap((user) => {\r\n    localStorage.setItem('token', user.payload.token);\r\n    this.router.navigateByUrl('/');\r\n  })\r\n);\r\n\r\n@Effect({ dispatch: false })\r\npublic LogOut: Observable<any> = this.actions.pipe(\r\n  ofType(AuthActionTypes.LOGOUT),\r\n  tap((user) => {\r\n    localStorage.removeItem('token');\r\n  })\r\n);\r\n};",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-4497ec084c1b580fbb1e77c64018d340",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "'http://localhost:3000'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "errMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    })\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methods": [
                {
                    "name": "createMusic",
                    "args": [
                        {
                            "name": "song",
                            "type": "string"
                        },
                        {
                            "name": "movie",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Music>",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "song",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "movie",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMusic",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllMusics",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Music[]>",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "getMusicById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Music>",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSignUpData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Music[]>",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "logIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMusic",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        },
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Music>",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport {catchError} from 'rxjs/operators';\r\n\r\nimport { User } from '../models/user';\r\nimport { Music } from '../models/music';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n   readonly BASE_URL = 'http://localhost:3000';\r\n\r\n  private errMessage: string;\r\n\r\n  get errorMessage(): string {\r\n    return this.errMessage;\r\n  }\r\n  set errorMessage(message: string) {\r\n    this.errMessage = message;\r\n  }\r\n  getToken(): string {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    })\r\n  }\r\n  constructor(private http: HttpClient) {\r\n    this.errorMessage = '';\r\n   }\r\n\r\n  //  logIn(user: User): Observable<User[]>{\r\n  //   const loginUrl = encodeURI('login?email=' + user.email + '&password=' + user.password);\r\n  //   return this.http.get<User[]>(this.BASE_URL + loginUrl);\r\n  // }\r\n\r\n  logIn(email: string, password: string): Observable<any> {\r\n    const url = `${this.BASE_URL}/login`;\r\n    return this.http.post<User>(url, {email, password}, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n\r\n  getSignUpData(): Observable<Music[]> {\r\n    const url = `${this.BASE_URL}/register`; \r\n  return this.http.get<Music[]>(url, this.httpOptions)\r\n        .pipe(\r\n  catchError(this.errorHandler)\r\n        )\r\n    }\r\n  \r\n  signUp(email: string, password: string): Observable<User> {\r\n    const url = `${this.BASE_URL}/register`; \r\n    return this.http.post<User>(url, {email, password}, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n  getAllMusics(): Observable<Music[]> {\r\n    const url = `${this.BASE_URL}/musics`;\r\n    return this.http.get<Music[]>(url, this.httpOptions )\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n\r\n  getMusicById(id: number): Observable<Music> {\r\n    const url = `${this.BASE_URL}/musics/`;\r\n    return this.http.get<Music>(url + id, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n  \r\n  createMusic(song: string, movie: string): Observable<Music> {\r\n    const url = `${this.BASE_URL}/musics`;\r\n    return this.http.post<Music>(url,{song, movie}, this.httpOptions )\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n\r\n  deleteMusic(id): Observable<any> {\r\n    const url = `${this.BASE_URL}/musics`;\r\n    return this.http.delete(`${this.BASE_URL}/`+'musics/' + id, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n\r\n  updateMusic(id, user ): Observable<Music> {\r\n    const url = `${this.BASE_URL}/musics/`;\r\n    return this.http.put<Music>(url + id, user, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n\r\n  errorHandler(error) {\r\n    let errorMessage = '';\r\n    if(error.error instanceof ErrorEvent) {\r\n   // Get client-side error\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Get server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    console.log(errorMessage);\r\n    return throwError(errorMessage);\r\n }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "setSignature": {
                        "name": "errorMessage",
                        "type": "void",
                        "args": [
                            {
                                "name": "message",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "message",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "string",
                        "returnType": "string",
                        "line": 18
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "MusicEffects",
            "id": "injectable-MusicEffects-992b80fa09921130b21119fbc703c493",
            "file": "src/app/store/effects/music.effects.ts",
            "properties": [
                {
                    "name": "createMusics",
                    "defaultValue": "this.actions.pipe(\r\n             ofType(ADD_MUSICS),\r\n             map((action: AddMusics) => action.payload),\r\n             mergeMap(payload => {\r\n                 return this.Musicervice.createMusic(payload.song, payload.movie).pipe(\r\n                     map((data) => {\r\n                         if(data){\r\n                            return new AddSuccess(data);\r\n                         }\r\n                     }))\r\n             }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeleteProduct",
                    "defaultValue": "this.actions.pipe(\r\n                                ofType(DELETE_MUSICS),\r\n                                map((action: DeleteMusics) => action.payload),\r\n                                mergeMap(payload => {\r\n                                    return this.Musicervice.deleteMusic(payload).pipe(\r\n                                        map((data) => {\r\n                                          \r\n                                            if (data) {\r\n                                               \r\n                                                return new DeleteMusicSuccess();\r\n\r\n                                            }\r\n                                        }));\r\n                                }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "ListMusics",
                    "defaultValue": "this.actions.pipe(\r\n                ofType(LIST_MUSICS),\r\n                map((action: ListMusics) => action),\r\n                mergeMap(payload => {\r\n                    return this.Musicervice.getAllMusics().pipe(\r\n                        map((data) => new ListDataSucess(data)));\r\n         }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateProduct",
                    "defaultValue": "this.actions.pipe(\r\n                  ofType(UPDATE_MUSICS),\r\n                  map((action: UpdateMusics) => action.payload),\r\n                  mergeMap(payload => {\r\n                      return this.Musicervice.updateMusic(payload.index,payload.newProduct).pipe(\r\n                         map((data) => {\r\n                         \r\n                             if (data) {\r\n                                  return new UpdateEditSuccess(data);\r\n                             }\r\n                          }));\r\n                  }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { switchMap, map,  mergeMap } from 'rxjs/operators';\r\n\r\nimport { ListDataSucess, LIST_MUSICS, ListMusics,DELETE_MUSICS,DeleteMusicSuccess, DeleteMusics,ADD_MUSICS,UPDATE_MUSICS,UpdateMusics,UpdateEditSuccess, AddMusics , AddSuccess } from '../actions/music.actions';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport {AuthService} from '../../services/auth.service';\r\n\r\n\r\n@Injectable()\r\nexport class MusicEffects {\r\n\r\n    constructor(\r\n        private actions: Actions,\r\n        private Musicervice: AuthService,\r\n        private router: Router,\r\n      ) {}\r\n\r\n\r\n      @Effect({dispatch: true})\r\n      ListMusics: Observable<any> =  this.actions.pipe(\r\n                ofType(LIST_MUSICS),\r\n                map((action: ListMusics) => action),\r\n                mergeMap(payload => {\r\n                    return this.Musicervice.getAllMusics().pipe(\r\n                        map((data) => new ListDataSucess(data)));\r\n         }));\r\n\r\n         @Effect({dispatch: true})\r\n         createMusics: Observable<any> = this.actions.pipe(\r\n             ofType(ADD_MUSICS),\r\n             map((action: AddMusics) => action.payload),\r\n             mergeMap(payload => {\r\n                 return this.Musicervice.createMusic(payload.song, payload.movie).pipe(\r\n                     map((data) => {\r\n                         if(data){\r\n                            return new AddSuccess(data);\r\n                         }\r\n                     }))\r\n             }));\r\n        \r\n             @Effect({dispatch: true})\r\n             UpdateProduct: Observable<any> =  this.actions.pipe(\r\n                  ofType(UPDATE_MUSICS),\r\n                  map((action: UpdateMusics) => action.payload),\r\n                  mergeMap(payload => {\r\n                      return this.Musicervice.updateMusic(payload.index,payload.newProduct).pipe(\r\n                         map((data) => {\r\n                         \r\n                             if (data) {\r\n                                  return new UpdateEditSuccess(data);\r\n                             }\r\n                          }));\r\n                  }));\r\n\r\n                  @Effect({dispatch: true})\r\n                        DeleteProduct: Observable<any> =  this.actions.pipe(\r\n                                ofType(DELETE_MUSICS),\r\n                                map((action: DeleteMusics) => action.payload),\r\n                                mergeMap(payload => {\r\n                                    return this.Musicervice.deleteMusic(payload).pipe(\r\n                                        map((data) => {\r\n                                          \r\n                                            if (data) {\r\n                                               \r\n                                                return new DeleteMusicSuccess();\r\n\r\n                                            }\r\n                                        }));\r\n                                }));     \r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "Musicervice",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "Musicervice",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-443dfb9e42e01ae95e2ba1907e39bb23",
            "file": "src/app/services/theme-color.service.ts",
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "light",
                    "type": "Theme",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "availableThemes",
                    "defaultValue": "[light, dark]",
                    "type": "Theme[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "getAvailableThemes",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme[]",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "isDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "setActiveTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "setLightTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Theme, light, dark } from '../theme-color';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n\r\n  constructor() { }\r\n  private active: Theme = light;\r\n  private availableThemes: Theme[] = [light, dark];\r\n\r\n  getAvailableThemes(): Theme[] {\r\n    return this.availableThemes;\r\n  }\r\n\r\n  getActiveTheme(): Theme {\r\n    return this.active;\r\n  }\r\n\r\n  isDarkTheme(): boolean {\r\n    return this.active.name === dark.name;\r\n  }\r\n\r\n  setDarkTheme(): void {\r\n    this.setActiveTheme(dark);\r\n  }\r\n\r\n  setLightTheme(): void {\r\n    this.setActiveTheme(light);\r\n  }\r\n\r\n  setActiveTheme(theme: Theme): void {\r\n    this.active = theme;\r\n\r\n    Object.keys(this.active.properties).forEach(property => {\r\n      document.documentElement.style.setProperty(\r\n        property,\r\n        this.active.properties[property]\r\n      );\r\n    });\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddMusics",
            "id": "class-AddMusics-1de1607122d25c54bff81283e3be8a2b",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Music} from '../../models/music';\r\n\r\n\r\nexport const LIST_MUSICS = '[Musics] List Fetch';\r\nexport const ADD_MUSICS = '[Musics] Add Music';\r\nexport const ADD_DATA_SUCCESS='[Musics] Add Success';\r\nexport const UPDATE_MUSICS = '[Musics] Update Recipe';\r\nexport const DELETE_MUSICS = '[Musics] Delete Recipe';\r\nexport const LIST_DATA_SUCCESS='[Musics] List Success';\r\nexport const DELETE_MUSIC_SUCCESS='[Music] Delete product success';\r\nexport const UPDATE_MUSIC_SUCCESS='[Music] Update product success';\r\n\r\nexport class ListMusics implements Action {\r\n  Music(Music: any) {\r\n      throw new Error(\"Method not implemented.\");\r\n  }\r\n  readonly type = LIST_MUSICS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Music[]) {}\r\n  }\r\n\r\nexport class AddMusics implements Action {\r\n  readonly type = ADD_MUSICS;\r\n\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateMusics implements Action {\r\n  readonly type = UPDATE_MUSICS;\r\n\r\n  constructor(public payload: { index: number; newProduct: Music }) {}\r\n}\r\n\r\nexport class DeleteMusics implements Action {\r\n  readonly type = DELETE_MUSICS;\r\n\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateEditSuccess implements Action {\r\n    readonly type = UPDATE_MUSIC_SUCCESS;\r\n    constructor(public payload: Music) {}\r\n  }\r\n  \r\n  export class DeleteMusicSuccess implements Action {\r\n    readonly type = DELETE_MUSIC_SUCCESS;\r\n    }\r\n\r\nexport type MusicsActions =\r\n  | ListMusics\r\n  | ListDataSucess\r\n  | AddMusics\r\n  | AddSuccess\r\n  | UpdateMusics\r\n  | DeleteMusics\r\n  | UpdateEditSuccess\r\n  | DeleteMusicSuccess\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_MUSICS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddSuccess",
            "id": "class-AddSuccess-1de1607122d25c54bff81283e3be8a2b",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Music} from '../../models/music';\r\n\r\n\r\nexport const LIST_MUSICS = '[Musics] List Fetch';\r\nexport const ADD_MUSICS = '[Musics] Add Music';\r\nexport const ADD_DATA_SUCCESS='[Musics] Add Success';\r\nexport const UPDATE_MUSICS = '[Musics] Update Recipe';\r\nexport const DELETE_MUSICS = '[Musics] Delete Recipe';\r\nexport const LIST_DATA_SUCCESS='[Musics] List Success';\r\nexport const DELETE_MUSIC_SUCCESS='[Music] Delete product success';\r\nexport const UPDATE_MUSIC_SUCCESS='[Music] Update product success';\r\n\r\nexport class ListMusics implements Action {\r\n  Music(Music: any) {\r\n      throw new Error(\"Method not implemented.\");\r\n  }\r\n  readonly type = LIST_MUSICS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Music[]) {}\r\n  }\r\n\r\nexport class AddMusics implements Action {\r\n  readonly type = ADD_MUSICS;\r\n\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateMusics implements Action {\r\n  readonly type = UPDATE_MUSICS;\r\n\r\n  constructor(public payload: { index: number; newProduct: Music }) {}\r\n}\r\n\r\nexport class DeleteMusics implements Action {\r\n  readonly type = DELETE_MUSICS;\r\n\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateEditSuccess implements Action {\r\n    readonly type = UPDATE_MUSIC_SUCCESS;\r\n    constructor(public payload: Music) {}\r\n  }\r\n  \r\n  export class DeleteMusicSuccess implements Action {\r\n    readonly type = DELETE_MUSIC_SUCCESS;\r\n    }\r\n\r\nexport type MusicsActions =\r\n  | ListMusics\r\n  | ListDataSucess\r\n  | AddMusics\r\n  | AddSuccess\r\n  | UpdateMusics\r\n  | DeleteMusics\r\n  | UpdateEditSuccess\r\n  | DeleteMusicSuccess\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteMusics",
            "id": "class-DeleteMusics-1de1607122d25c54bff81283e3be8a2b",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Music} from '../../models/music';\r\n\r\n\r\nexport const LIST_MUSICS = '[Musics] List Fetch';\r\nexport const ADD_MUSICS = '[Musics] Add Music';\r\nexport const ADD_DATA_SUCCESS='[Musics] Add Success';\r\nexport const UPDATE_MUSICS = '[Musics] Update Recipe';\r\nexport const DELETE_MUSICS = '[Musics] Delete Recipe';\r\nexport const LIST_DATA_SUCCESS='[Musics] List Success';\r\nexport const DELETE_MUSIC_SUCCESS='[Music] Delete product success';\r\nexport const UPDATE_MUSIC_SUCCESS='[Music] Update product success';\r\n\r\nexport class ListMusics implements Action {\r\n  Music(Music: any) {\r\n      throw new Error(\"Method not implemented.\");\r\n  }\r\n  readonly type = LIST_MUSICS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Music[]) {}\r\n  }\r\n\r\nexport class AddMusics implements Action {\r\n  readonly type = ADD_MUSICS;\r\n\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateMusics implements Action {\r\n  readonly type = UPDATE_MUSICS;\r\n\r\n  constructor(public payload: { index: number; newProduct: Music }) {}\r\n}\r\n\r\nexport class DeleteMusics implements Action {\r\n  readonly type = DELETE_MUSICS;\r\n\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateEditSuccess implements Action {\r\n    readonly type = UPDATE_MUSIC_SUCCESS;\r\n    constructor(public payload: Music) {}\r\n  }\r\n  \r\n  export class DeleteMusicSuccess implements Action {\r\n    readonly type = DELETE_MUSIC_SUCCESS;\r\n    }\r\n\r\nexport type MusicsActions =\r\n  | ListMusics\r\n  | ListDataSucess\r\n  | AddMusics\r\n  | AddSuccess\r\n  | UpdateMusics\r\n  | DeleteMusics\r\n  | UpdateEditSuccess\r\n  | DeleteMusicSuccess\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_MUSICS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteMusicSuccess",
            "id": "class-DeleteMusicSuccess-1de1607122d25c54bff81283e3be8a2b",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Music} from '../../models/music';\r\n\r\n\r\nexport const LIST_MUSICS = '[Musics] List Fetch';\r\nexport const ADD_MUSICS = '[Musics] Add Music';\r\nexport const ADD_DATA_SUCCESS='[Musics] Add Success';\r\nexport const UPDATE_MUSICS = '[Musics] Update Recipe';\r\nexport const DELETE_MUSICS = '[Musics] Delete Recipe';\r\nexport const LIST_DATA_SUCCESS='[Musics] List Success';\r\nexport const DELETE_MUSIC_SUCCESS='[Music] Delete product success';\r\nexport const UPDATE_MUSIC_SUCCESS='[Music] Update product success';\r\n\r\nexport class ListMusics implements Action {\r\n  Music(Music: any) {\r\n      throw new Error(\"Method not implemented.\");\r\n  }\r\n  readonly type = LIST_MUSICS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Music[]) {}\r\n  }\r\n\r\nexport class AddMusics implements Action {\r\n  readonly type = ADD_MUSICS;\r\n\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateMusics implements Action {\r\n  readonly type = UPDATE_MUSICS;\r\n\r\n  constructor(public payload: { index: number; newProduct: Music }) {}\r\n}\r\n\r\nexport class DeleteMusics implements Action {\r\n  readonly type = DELETE_MUSICS;\r\n\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateEditSuccess implements Action {\r\n    readonly type = UPDATE_MUSIC_SUCCESS;\r\n    constructor(public payload: Music) {}\r\n  }\r\n  \r\n  export class DeleteMusicSuccess implements Action {\r\n    readonly type = DELETE_MUSIC_SUCCESS;\r\n    }\r\n\r\nexport type MusicsActions =\r\n  | ListMusics\r\n  | ListDataSucess\r\n  | AddMusics\r\n  | AddSuccess\r\n  | UpdateMusics\r\n  | DeleteMusics\r\n  | UpdateEditSuccess\r\n  | DeleteMusicSuccess\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListDataSucess",
            "id": "class-ListDataSucess-1de1607122d25c54bff81283e3be8a2b",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Music} from '../../models/music';\r\n\r\n\r\nexport const LIST_MUSICS = '[Musics] List Fetch';\r\nexport const ADD_MUSICS = '[Musics] Add Music';\r\nexport const ADD_DATA_SUCCESS='[Musics] Add Success';\r\nexport const UPDATE_MUSICS = '[Musics] Update Recipe';\r\nexport const DELETE_MUSICS = '[Musics] Delete Recipe';\r\nexport const LIST_DATA_SUCCESS='[Musics] List Success';\r\nexport const DELETE_MUSIC_SUCCESS='[Music] Delete product success';\r\nexport const UPDATE_MUSIC_SUCCESS='[Music] Update product success';\r\n\r\nexport class ListMusics implements Action {\r\n  Music(Music: any) {\r\n      throw new Error(\"Method not implemented.\");\r\n  }\r\n  readonly type = LIST_MUSICS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Music[]) {}\r\n  }\r\n\r\nexport class AddMusics implements Action {\r\n  readonly type = ADD_MUSICS;\r\n\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateMusics implements Action {\r\n  readonly type = UPDATE_MUSICS;\r\n\r\n  constructor(public payload: { index: number; newProduct: Music }) {}\r\n}\r\n\r\nexport class DeleteMusics implements Action {\r\n  readonly type = DELETE_MUSICS;\r\n\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateEditSuccess implements Action {\r\n    readonly type = UPDATE_MUSIC_SUCCESS;\r\n    constructor(public payload: Music) {}\r\n  }\r\n  \r\n  export class DeleteMusicSuccess implements Action {\r\n    readonly type = DELETE_MUSIC_SUCCESS;\r\n    }\r\n\r\nexport type MusicsActions =\r\n  | ListMusics\r\n  | ListDataSucess\r\n  | AddMusics\r\n  | AddSuccess\r\n  | UpdateMusics\r\n  | DeleteMusics\r\n  | UpdateEditSuccess\r\n  | DeleteMusicSuccess\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music[]"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LIST_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListMusics",
            "id": "class-ListMusics-1de1607122d25c54bff81283e3be8a2b",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Music} from '../../models/music';\r\n\r\n\r\nexport const LIST_MUSICS = '[Musics] List Fetch';\r\nexport const ADD_MUSICS = '[Musics] Add Music';\r\nexport const ADD_DATA_SUCCESS='[Musics] Add Success';\r\nexport const UPDATE_MUSICS = '[Musics] Update Recipe';\r\nexport const DELETE_MUSICS = '[Musics] Delete Recipe';\r\nexport const LIST_DATA_SUCCESS='[Musics] List Success';\r\nexport const DELETE_MUSIC_SUCCESS='[Music] Delete product success';\r\nexport const UPDATE_MUSIC_SUCCESS='[Music] Update product success';\r\n\r\nexport class ListMusics implements Action {\r\n  Music(Music: any) {\r\n      throw new Error(\"Method not implemented.\");\r\n  }\r\n  readonly type = LIST_MUSICS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Music[]) {}\r\n  }\r\n\r\nexport class AddMusics implements Action {\r\n  readonly type = ADD_MUSICS;\r\n\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateMusics implements Action {\r\n  readonly type = UPDATE_MUSICS;\r\n\r\n  constructor(public payload: { index: number; newProduct: Music }) {}\r\n}\r\n\r\nexport class DeleteMusics implements Action {\r\n  readonly type = DELETE_MUSICS;\r\n\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateEditSuccess implements Action {\r\n    readonly type = UPDATE_MUSIC_SUCCESS;\r\n    constructor(public payload: Music) {}\r\n  }\r\n  \r\n  export class DeleteMusicSuccess implements Action {\r\n    readonly type = DELETE_MUSIC_SUCCESS;\r\n    }\r\n\r\nexport type MusicsActions =\r\n  | ListMusics\r\n  | ListDataSucess\r\n  | AddMusics\r\n  | AddSuccess\r\n  | UpdateMusics\r\n  | DeleteMusics\r\n  | UpdateEditSuccess\r\n  | DeleteMusicSuccess\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LIST_MUSICS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "Music",
                    "args": [
                        {
                            "name": "Music",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "Music",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-95de923a0c8efe5041805439a7920ab6",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\nimport { Music } from '../../models/music';\r\nimport { createAction, props } from '@ngrx/store';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE  = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class LogOut implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n  }\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-95de923a0c8efe5041805439a7920ab6",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\nimport { Music } from '../../models/music';\r\nimport { createAction, props } from '@ngrx/store';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE  = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class LogOut implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n  }\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-95de923a0c8efe5041805439a7920ab6",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\nimport { Music } from '../../models/music';\r\nimport { createAction, props } from '@ngrx/store';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE  = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class LogOut implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n  }\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-95de923a0c8efe5041805439a7920ab6",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\nimport { Music } from '../../models/music';\r\nimport { createAction, props } from '@ngrx/store';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE  = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class LogOut implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n  }\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-95de923a0c8efe5041805439a7920ab6",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\nimport { Music } from '../../models/music';\r\nimport { createAction, props } from '@ngrx/store';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE  = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class LogOut implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n  }\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-95de923a0c8efe5041805439a7920ab6",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\nimport { Music } from '../../models/music';\r\nimport { createAction, props } from '@ngrx/store';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE  = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class LogOut implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n  }\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-95de923a0c8efe5041805439a7920ab6",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\nimport { Music } from '../../models/music';\r\nimport { createAction, props } from '@ngrx/store';\r\n\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE  = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n    constructor(public payload: any) {}\r\n  }\r\n\r\n  export class LogOut implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n  }\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateEditSuccess",
            "id": "class-UpdateEditSuccess-1de1607122d25c54bff81283e3be8a2b",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Music} from '../../models/music';\r\n\r\n\r\nexport const LIST_MUSICS = '[Musics] List Fetch';\r\nexport const ADD_MUSICS = '[Musics] Add Music';\r\nexport const ADD_DATA_SUCCESS='[Musics] Add Success';\r\nexport const UPDATE_MUSICS = '[Musics] Update Recipe';\r\nexport const DELETE_MUSICS = '[Musics] Delete Recipe';\r\nexport const LIST_DATA_SUCCESS='[Musics] List Success';\r\nexport const DELETE_MUSIC_SUCCESS='[Music] Delete product success';\r\nexport const UPDATE_MUSIC_SUCCESS='[Music] Update product success';\r\n\r\nexport class ListMusics implements Action {\r\n  Music(Music: any) {\r\n      throw new Error(\"Method not implemented.\");\r\n  }\r\n  readonly type = LIST_MUSICS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Music[]) {}\r\n  }\r\n\r\nexport class AddMusics implements Action {\r\n  readonly type = ADD_MUSICS;\r\n\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateMusics implements Action {\r\n  readonly type = UPDATE_MUSICS;\r\n\r\n  constructor(public payload: { index: number; newProduct: Music }) {}\r\n}\r\n\r\nexport class DeleteMusics implements Action {\r\n  readonly type = DELETE_MUSICS;\r\n\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateEditSuccess implements Action {\r\n    readonly type = UPDATE_MUSIC_SUCCESS;\r\n    constructor(public payload: Music) {}\r\n  }\r\n  \r\n  export class DeleteMusicSuccess implements Action {\r\n    readonly type = DELETE_MUSIC_SUCCESS;\r\n    }\r\n\r\nexport type MusicsActions =\r\n  | ListMusics\r\n  | ListDataSucess\r\n  | AddMusics\r\n  | AddSuccess\r\n  | UpdateMusics\r\n  | DeleteMusics\r\n  | UpdateEditSuccess\r\n  | DeleteMusicSuccess\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusics",
            "id": "class-UpdateMusics-1de1607122d25c54bff81283e3be8a2b",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Music} from '../../models/music';\r\n\r\n\r\nexport const LIST_MUSICS = '[Musics] List Fetch';\r\nexport const ADD_MUSICS = '[Musics] Add Music';\r\nexport const ADD_DATA_SUCCESS='[Musics] Add Success';\r\nexport const UPDATE_MUSICS = '[Musics] Update Recipe';\r\nexport const DELETE_MUSICS = '[Musics] Delete Recipe';\r\nexport const LIST_DATA_SUCCESS='[Musics] List Success';\r\nexport const DELETE_MUSIC_SUCCESS='[Music] Delete product success';\r\nexport const UPDATE_MUSIC_SUCCESS='[Music] Update product success';\r\n\r\nexport class ListMusics implements Action {\r\n  Music(Music: any) {\r\n      throw new Error(\"Method not implemented.\");\r\n  }\r\n  readonly type = LIST_MUSICS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Music[]) {}\r\n  }\r\n\r\nexport class AddMusics implements Action {\r\n  readonly type = ADD_MUSICS;\r\n\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateMusics implements Action {\r\n  readonly type = UPDATE_MUSICS;\r\n\r\n  constructor(public payload: { index: number; newProduct: Music }) {}\r\n}\r\n\r\nexport class DeleteMusics implements Action {\r\n  readonly type = DELETE_MUSICS;\r\n\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateEditSuccess implements Action {\r\n    readonly type = UPDATE_MUSIC_SUCCESS;\r\n    constructor(public payload: Music) {}\r\n  }\r\n  \r\n  export class DeleteMusicSuccess implements Action {\r\n    readonly type = DELETE_MUSIC_SUCCESS;\r\n    }\r\n\r\nexport type MusicsActions =\r\n  | ListMusics\r\n  | ListDataSucess\r\n  | AddMusics\r\n  | AddSuccess\r\n  | UpdateMusics\r\n  | DeleteMusics\r\n  | UpdateEditSuccess\r\n  | DeleteMusicSuccess\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_MUSICS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "User",
            "id": "class-User-bb6623f142be122aa0e3ac79ea758a58",
            "file": "src/app/models/user.ts",
            "type": "class",
            "sourceCode": "export class User {\r\n    id?: string;\r\n    email?: string;\r\n    password?: string;\r\n    token?: string;\r\n  }\r\n\r\n  ",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddMusicComponent",
            "id": "component-AddMusicComponent-23a175de5635bc7f40f884e01dd73ba1",
            "file": "src/app/components/Music/add-music/add-music.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-music",
            "styleUrls": [
                "./add-music.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-music.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "music",
                    "defaultValue": "{\r\n                song : null,\r\n                movie: null\r\n              }",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n\r\nimport { AppState  } from '../../../store/app.states';\r\nimport { Store } from '@ngrx/store';\r\nimport { AddMusics,ListMusics } from 'src/app/store/actions/music.actions';\r\n\r\n@Component({\r\n  selector: 'app-add-music',\r\n  templateUrl: './add-music.component.html',\r\n  styleUrls: ['./add-music.component.scss']\r\n})\r\nexport class AddMusicComponent implements OnInit {\r\n \r\n  constructor(private router: Router, \r\n             private store: Store<AppState>) { }\r\n              music: any = {\r\n                song : null,\r\n                movie: null\r\n              }\r\n\r\n  addForm: FormGroup;\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  onSubmit() {\r\n    const payload = {\r\n      song: this.music.song,\r\n      movie: this.music.movie\r\n    };\r\n    this.store.dispatch(new AddMusics(payload));\r\n    this.store.dispatch(new ListMusics());\r\n    this.router.navigate(['/list-music']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".add {\r\n    width: 400px;\r\n    margin: 16px auto;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .add-header,\r\n  .add p {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n  }\r\n  \r\n  .add-header {\r\n    background: #28d;\r\n    padding: 20px;\r\n    font-size: 1.4em;\r\n    font-weight: normal;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    color: #fff;\r\n  }\r\n  \r\n  .add-container {\r\n    background: #ebebeb;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .add p {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .add input {\r\n    box-sizing: border-box;\r\n    display: block;\r\n    width: 100%;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    padding: 16px;\r\n    outline: 0;\r\n    font-family: inherit;\r\n    font-size: 0.95em;\r\n  }\r\n  \r\n  .add input[type=\"email\"],\r\n  .add input[type=\"password\"] {\r\n    background: #fff;\r\n    border-color: #bbb;\r\n    color: #555;\r\n  }\r\n  \r\n  .add input[type=\"email\"]:focus,\r\n  .add input[type=\"password\"]:focus {\r\n    border-color: #888;\r\n  }\r\n  \r\n  .add input[type=\"submit\"] {\r\n    background: #28d;\r\n    border-color: transparent;\r\n    color: #fff;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .add input[type=\"submit\"]:hover {\r\n    background: #17c;\r\n  }\r\n  \r\n  .add input[type=\"submit\"]:focus {\r\n    border-color: #05a;\r\n  }",
                    "styleUrl": "./add-music.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"add\">\r\n  <h2 class=\"add-header\">Create Form</h2>\r\n  <form class=\"add-container\" (ngSubmit)=\"onSubmit()\"  ngNativeValidate>\r\n    <p>\r\n        <input type=\"text\"  [(ngModel)]=\"music.song\"\r\n        name=\"song\"\r\n        type=\"text\"\r\n        id=\"song\"\r\n        placeholder=\"Enter Song Name\" required autofocus>\r\n      </p>\r\n    <p>\r\n        <input [(ngModel)]=\"music.movie\"\r\n        name=\"movie\"\r\n        type=\"text\"\r\n        id=\"movie\"\r\n        placeholder=\"Enter Movie Name\" required></p>\r\n    <p><input area-label=\"add\" tabindex=\"0\" type=\"submit\"  name=\"submit\" type=\"submit\" value=\"Submit\"></p>\r\n    <a [routerLink]=\"['/list-music']\" >Cancel</a>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d8d16030989236a49cf558b282021541",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'assignment'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'assignment';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item1 { grid-area: header; }\r\n\r\n\r\n\r\n.grid-container {\r\n    display: grid;\r\n    grid-template-areas:\r\n      'header header header header header header';\r\n    /* grid-gap: 100%; */\r\n    //background-color: #21f379;\r\n    padding: 10px;\r\n  }\r\n  \r\n  .grid-container > div {\r\n    background-color: #ffffffcc;\r\n    text-align: center;\r\n    // padding: 10px 0;\r\n    overflow-y: hidden;\r\n    overflow-x: hidden;\r\n \r\n\r\n    font-size: 30px;\r\n  }",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\n<div class=\"grid-container\">\n  <div class=\"item1\">\n    <router-outlet></router-outlet>\n  </div>\n</div>"
        },
        {
            "name": "EditMusicComponent",
            "id": "component-EditMusicComponent-2ccd11b2119f2a8cec19d16949aae7d9",
            "file": "src/app/components/Music/edit-music/edit-music.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-music",
            "styleUrls": [
                "./edit-music.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-music.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editform",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "fbs",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "music",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "musicService",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\n\r\nimport { Store } from '@ngrx/store';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Music } from '../../../models/music';\r\nimport { Observable } from 'rxjs';\r\nimport { AppState, selectMusicState } from 'src/app/store/app.states';\r\nimport {UpdateMusics,ListMusics} from '../../../store/actions/music.actions';\r\n\r\n@Component({\r\n  selector: 'app-edit-music',\r\n  templateUrl: './edit-music.component.html',\r\n  styleUrls: ['./edit-music.component.scss']\r\n})\r\nexport class EditMusicComponent implements OnInit {\r\n\r\n\r\n  id: number;\r\n  music: Music;\r\n  editform: FormGroup;\r\n  getState: Observable<any>;\r\n  errorMessage: string | null;\r\n\r\n  constructor(\r\n    public musicService:AuthService,\r\n    private route: ActivatedRoute,\r\n    private store: Store<AppState>,\r\n    public fbs: FormBuilder,\r\n    private router: Router\r\n  ) \r\n  {  this.getState = this.store.select(selectMusicState); }\r\n\r\n  ngOnInit(): void {\r\n\r\n      this.id = this.route.snapshot.params['musicId'];\r\n      this.musicService.getMusicById(this.id).subscribe((data:Music)=>{\r\n      this.music= data;\r\n      });\r\n      \r\n      this.editform = this.fbs.group({\r\n          song: [''],\r\n          movie: [''],   \r\n      })\r\n  \r\n      this.musicService.getMusicById(this.id)\r\n      .subscribe( data => {\r\n       console.log('d',data);\r\n        this.editform.setValue(data);\r\n      });\r\n  \r\n    }\r\n\r\n   submit(){\r\n        const payload = {\r\n          index: this.id,\r\n          newProduct: this.editform.value\r\n        };\r\n        this.store.dispatch(new UpdateMusics(payload));\r\n        this.store.dispatch(new ListMusics());\r\n        this.router.navigateByUrl('/list-music');\r\n      }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".edit {\r\n    width: 400px;\r\n    margin: 16px auto;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .edit-header,\r\n  .edit p {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n  }\r\n  \r\n  .edit-header {\r\n    background: #28d;\r\n    padding: 20px;\r\n    font-size: 1.4em;\r\n    font-weight: normal;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    color: #fff;\r\n  }\r\n  \r\n  .edit-container {\r\n    background: #ebebeb;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .edit p {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .edit input {\r\n    box-sizing: border-box;\r\n    display: block;\r\n    width: 100%;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    padding: 16px;\r\n    outline: 0;\r\n    font-family: inherit;\r\n    font-size: 0.95em;\r\n  }\r\n  \r\n  .edit input[type=\"email\"],\r\n  .edit input[type=\"password\"] {\r\n    background: #fff;\r\n    border-color: #bbb;\r\n    color: #555;\r\n  }\r\n  \r\n  .edit input[type=\"email\"]:focus,\r\n  .edit input[type=\"password\"]:focus {\r\n    border-color: #888;\r\n  }\r\n  \r\n  .edit input[type=\"submit\"] {\r\n    background: #28d;\r\n    border-color: transparent;\r\n    color: #fff;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .edit input[type=\"submit\"]:hover {\r\n    background: #17c;\r\n  }\r\n  \r\n  .edit input[type=\"submit\"]:focus {\r\n    border-color: #05a;\r\n  }",
                    "styleUrl": "./edit-music.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "musicService",
                        "type": "AuthService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "fbs",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "musicService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fbs",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"edit\">\r\n    <h2 class=\"edit-header\">Edit Form</h2>\r\n    <form class=\"edit-container\" [formGroup]=\"editform\" (ngSubmit)=\"submit()\" ngNativeValidate>\r\n      <p>\r\n          <input type=\"text\"   name=\"song\" id=\"song\" formControlName=\"song\"\r\n          required\r\n          placeholder=\"Email\">\r\n        </p>\r\n      <p>\r\n          <input name=\"movie\" id=\"movie\" formControlName=\"movie\"\r\n          required\r\n          placeholder=\"Password\"></p>\r\n      <p><input type=\"submit\" [disabled]=\"!editform.valid\" area-label=\"editbutton\" tabindex=\"0\" value=\"Submit\"></p>\r\n      <a [routerLink]=\"['/list-music']\" area-label=\"canel\" tabindex=\"0\"  >Cancel</a>\r\n    </form>\r\n  </div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3149104a5017515961c638d9c14c1f40",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "quotes",
                    "type": "Music[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "theme",
                    "defaultValue": "'ligth'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "themeService",
                    "type": "ThemeService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Music } from '../models/music';\r\nimport { ThemeService } from '../services/theme-color.service';\r\nimport { LogOut } from '../store/actions/auth.actions';\r\nimport { AppState , selectAuthState } from '../store/app.states';\r\n\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  getState: Observable<any>;\r\n  isAuthenticated: false;\r\n  quotes: Music[];\r\n  user = null;\r\n  theme = 'ligth';\r\n  errorMessage = null;\r\n  constructor(private store: Store<AppState>, private router: Router, public themeService: ThemeService) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getState.subscribe((state) => {\r\n      if(state){\r\n        this.isAuthenticated = state.isAuthenticated;\r\n        this.user = state.user;\r\n        this.errorMessage = state.errorMessage;\r\n      }\r\n    });\r\n  }\r\n\r\n  changeTheme(){\r\n    if (this.theme === 'ligth'){\r\n      this.themeService.setLightTheme();\r\n    } else{\r\n      this.themeService.setDarkTheme();\r\n    }\r\n  }\r\n\r\n  public logOut(): void {\r\n    this.store.dispatch(new LogOut());\r\n    this.router.navigateByUrl('/');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item1 { grid-area: header; }\r\n\r\n.item1 .home {\r\n    float: left;\r\n    text-decoration: none;\r\n}\r\n\r\n.item1 .login  {\r\n    float: right;\r\n    padding-right: 5px;\r\n    text-decoration: none;\r\n}\r\n\r\n.item1 .registration  {\r\n    float: right;\r\n    padding-right: 5px;\r\n    text-decoration: none;\r\n}\r\n\r\n.grid-container-header {\r\n  display: grid;\r\n  grid-template-areas:\r\n    'header header header header header header';\r\n  /* grid-gap: 100%; */\r\n  background-color: #2196F3;\r\n  padding: 10px;\r\n}\r\n\r\n.grid-container-header > div {\r\n  background-color: #ffffffcc;\r\n  text-align: center;\r\n  padding: 20px 0;\r\n  font-size: 30px;\r\n}\r\n \r\n.logoutBtn {\r\n  cursor: pointer;\r\n}\r\n.themes{width: 200px; font-size:16px;margin:10px;}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"grid-container-header\">\r\n  <div class=\"item1\">\r\n    <div *ngIf=\"isAuthenticated; then doSomething; else doSomethingElse;\"></div>\r\n    <ng-template #doSomething>\r\n        <label>Logged User : <em>{{user.email}}!</em></label>\r\n        <div>\r\n            <a class=\"logoutBtn\" (click)=\"logOut()\">Log out</a>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template #doSomethingElse>\r\n      <a class=\"home\"area-label=\"home\" tabindex=\"0\"  routerLink=\"/home\">Home</a>\r\n      <a class=\"login\" area-label=\"login\" tabindex=\"0\"  routerLink=\"/log-in\">Login</a>   \r\n      <a class=\"registration\" area-label=\"sing\" tabindex=\"0\"  routerLink=\"/sign-up\">Signup</a>\r\n      \r\n    </ng-template>\r\n  </div>\r\n</div>\r\n<div class=\"themes\">\r\n  <label class=\"radio-inline\">\r\n  <input type=\"radio\" value=\"ligth\" name=\"theme\"   [(ngModel)]=\"theme\" (change)=\"changeTheme()\"> ligth theme\r\n  </label>\r\n  <label class=\"radio-inline\">\r\n  <input type=\"radio\" value=\"dark\" name=\"theme\"  [(ngModel)]=\"theme\"  (change)=\"changeTheme()\"> dark theme\r\n  </label>\r\n</div>"
        },
        {
            "name": "LandingComponent",
            "id": "component-LandingComponent-534a794c96f2018a79333302d1caa5cd",
            "file": "src/app/components/landing/landing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing",
            "styleUrls": [
                "./landing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "musics",
                    "type": "Music[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, from } from 'rxjs';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\nimport { Music } from '../../models/music'\r\n\r\nimport { AppState, selectAuthState } from '../../store/app.states';\r\nimport { LogOut } from '../../store/actions/auth.actions';\r\n\r\n@Component({\r\n  selector: 'app-landing',\r\n  templateUrl: './landing.component.html',\r\n  styleUrls: ['./landing.component.scss']\r\n})\r\nexport class LandingComponent implements OnInit {\r\n\r\n  getState: Observable<any>;\r\n  isAuthenticated: false;\r\n  user = null;\r\n  errorMessage = null;\r\n\r\n  musics: Music[];\r\n\r\n  constructor(\r\n    private store: Store<AppState>, private apiService: AuthService\r\n  ) {this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getState.subscribe((state) => {\r\n      if(state){\r\n        this.isAuthenticated = state.isAuthenticated;\r\n        this.user = state.user;\r\n        this.errorMessage = state.errorMessage;\r\n      }\r\n    });\r\n\r\n    this.apiService.getAllMusics()\r\n      .subscribe(data => {\r\n        this.musics = data\r\n      })\r\n  }\r\n\r\n  logOut(): void {\r\n    this.store.dispatch(new LogOut);\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    display: grid;\r\n    grid-template-columns: auto;\r\n    // background-color:black;\r\n    padding: 10px;\r\n    width: 800px;\r\n  }\r\n  .grid-item {\r\n    background-color: rgba(255, 255, 255, 0.8);\r\n    border: 1px solid black;\r\n    padding: 10px;\r\n    font-size: 15px; \r\n    color: black;\r\n  }\r\n  .buttons{\r\n    float: right;\r\n  }\r\n  .texts{\r\n    text-align: left;\r\n    font-size:20px;\r\n  }\r\n\r\n \r\n  \r\n",
                    "styleUrl": "./landing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "apiService",
                        "type": "AuthService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"grid-container\" *ngFor=\"let music of musics\">\n  <div class=\"grid-item\">\n   <div class=\"texts\">\n    <h6><span style=\"color:white\">11</span>Song:    {{ music.song }}</h6>\n    <h6><span style=\"color:white\">11</span>Movie:   {{music.movie}}</h6>\n  </div>\n  </div>\n</div>"
        },
        {
            "name": "ListMusicComponent",
            "id": "component-ListMusicComponent-8ae747340c9a35cf395d9a4b8132dd5b",
            "file": "src/app/components/Music/list-music/list-music.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-music",
            "styleUrls": [
                "./list-music.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-music.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isUpdateActivated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "musics",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "musicService",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteMusic",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { AppState, selectMusicState } from '../../../store/app.states';\r\nimport {Store} from '@ngrx/store';\r\nimport { ListMusics } from '../../../store/actions/music.actions';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-list-music',\r\n     templateUrl: './list-music.component.html',\r\n    styleUrls: ['./list-music.component.scss']\r\n})\r\nexport class ListMusicComponent implements OnInit {\r\n\r\n  public musics:any\r\n  isUpdateActivated = false;\r\n  \r\n  getState: Observable<any>;\r\n  errorMessage: string | null;\r\n  constructor(public musicService: AuthService,private store: Store<AppState>) { \r\n    this.getState = this.store.select(selectMusicState);\r\n  }\r\n  ngOnInit(): void {\r\n  \r\n    this.store.dispatch(new ListMusics());\r\n    this.store.subscribe(data => {\r\n      this.musics = data.music.musics;\r\n    });\r\n\r\n  }\r\n\r\n  deleteMusic(id){\r\n    this.musicService.deleteMusic(id).subscribe(res => {\r\n         this.musics = this.musics.filter(item => item.id !== id);\r\n    })\r\n   }\r\n \r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    display: grid;\r\n    grid-template-columns: auto;\r\n    // background-color:black;\r\n    padding: 10px;\r\n    width: 800px;\r\n  }\r\n  .grid-item {\r\n    background-color: rgba(255, 255, 255, 0.8);\r\n    border: 1px solid black;\r\n    padding: 10px;\r\n    font-size: 5px; \r\n    color: black;\r\n  }\r\n  button{\r\n        background-color: #4CAF50; /* Green */\r\n        border: none;\r\n        color: rgb(255, 255, 255);\r\n        padding: 10px;\r\n        text-align: center;\r\n        float: right;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 16px;\r\n        margin: 4px 2px;\r\n        cursor: pointer;\r\n        border-radius: 12px;\r\n       \r\n      \r\n  }\r\n  .delbtn {\r\n      background-color: rgba(255, 0, 0, 0.404);\r\n  }\r\n \r\n  .texts{\r\n    text-align: left;\r\n    font-size:20px;\r\n  }\r\n\r\n",
                    "styleUrl": "./list-music.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "musicService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "musicService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<button type=\"button\" routerLink=\"/add-music\">Create</button>\r\n<div class=\"grid-container\" *ngFor=\"let music of musics\">\r\n \r\n    <div class=\"grid-item\">\r\n     <div class=\"texts\">\r\n      <h6><span style=\"color:white\">11</span>Song:{{ music.song }}</h6>\r\n      <h6><span style=\"color:white\">11</span>Movie:{{music.movie}}</h6>\r\n    </div>\r\n    <div class=\"buttons\">\r\n        <button type=\"button\" class=\"delbtn\" (click)=\"deleteMusic(music.id)\" value=\"Delete\" >Delete</button>\r\n        <button type=\"button\" class=\"editbtn\" href=\"#\" [routerLink]=\"['/edit-music/', music.id]\">Edit</button>\r\n    </div>\r\n    </div>\r\n  </div>"
        },
        {
            "name": "LogInComponent",
            "id": "component-LogInComponent-d07d7a2ea6ee9cd1626d1d3865759f62",
            "file": "src/app/components/log-in/log-in.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-log-in",
            "styleUrls": [
                "./log-in.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./log-in.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allSignupData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "incorrectError",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "user",
                    "defaultValue": "new User()",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { User } from '../../models/user';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { AppState , selectAuthState } from '../../store/app.states';\r\nimport { LogIn } from '../../store/actions/auth.actions';;\r\n\r\n@Component({\r\n  selector: 'app-log-in',\r\n  templateUrl: './log-in.component.html',\r\n  styleUrls: ['./log-in.component.scss']\r\n})\r\nexport class LogInComponent implements OnInit {\r\n\r\n  user: User = new User();\r\n  getState: Observable<any>;\r\n  errorMessage: string | null;\r\n  allSignupData: any;\r\n  incorrectError = false;\r\n\r\n  constructor(private store: Store<AppState>,private authService: AuthService ) { \r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getState.subscribe((state) => {\r\n      if(state){\r\n        this.errorMessage = state.errorMessage;\r\n      }\r\n     \r\n    });\r\n  };\r\n\r\n  onSubmit(): void {\r\n    this.authService.getSignUpData().subscribe((response) => {\r\n      this.allSignupData = response;\r\n      const even = (item: any) => this.user.email === item.email && this.user.password === item.password;\r\n      if (this.allSignupData.some(even) === true) {\r\n        const payload = {\r\n          email: this.user.email,\r\n          password: this.user.password\r\n        };\r\n        this.store.dispatch(new LogIn(payload));\r\n      } else {\r\n        this.incorrectError = true;\r\n        setTimeout(() => {\r\n          this.incorrectError = false;\r\n        }, 3000);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login {\r\n    width: 400px;\r\n    margin: 16px auto;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .login-header,\r\n  .login p {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n  }\r\n  .login-error {\r\n    color: red;\r\n}\r\n  .login-header {\r\n    background: #28d;\r\n    padding: 20px;\r\n    font-size: 1.4em;\r\n    font-weight: normal;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    color: #fff;\r\n  }\r\n  \r\n  \r\n  .login-container {\r\n    background: #ebebeb;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .login p {\r\n    padding: 12px;\r\n    padding-left: 0px;\r\n  }\r\n  \r\n  .login input {\r\n    box-sizing: border-box;\r\n    display: block;\r\n    width: 100%;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    padding: 16px;\r\n    outline: 0;\r\n    font-family: inherit;\r\n    font-size: 0.95em;\r\n  }\r\n  \r\n  .login input[type=\"email\"],\r\n  .login input[type=\"password\"] {\r\n    background: #fff;\r\n    border-color: #bbb;\r\n    color: #555;\r\n  }\r\n  \r\n  .login input[type=\"email\"]:focus,\r\n  .login input[type=\"password\"]:focus {\r\n    border-color: #888;\r\n  }\r\n  \r\n  .login input[type=\"submit\"] {\r\n    background: #28d;\r\n    border-color: transparent;\r\n    color: #fff;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .login input[type=\"submit\"]:hover {\r\n    background: #17c;\r\n  }\r\n  \r\n  .login input[type=\"submit\"]:focus {\r\n    border-color: #05a;\r\n  }",
                    "styleUrl": "./log-in.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n  <div class=\"login\">\r\n    <h2 class=\"login-header\">Log in</h2>\r\n    <div *ngIf=\"incorrectError\" class=\"login-error m-b-10\">Username or password is incorrect.</div>\r\n    <form class=\"login-container\" (ngSubmit)=\"onSubmit()\" ngNativeValidate>\r\n      <p>\r\n          <input [(ngModel)]=\"user.email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          required\r\n          id=\"email\"\r\n          placeholder=\"Email\">\r\n        </p>\r\n      <p>\r\n          <input  [(ngModel)]=\"user.password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          required\r\n          id=\"password\"\r\n          placeholder=\"Password\"></p>\r\n      <p><input type=\"submit\" value=\"Log in\"></p>\r\n      <a routerLink=\"/home\" >Cancel</a>\r\n    </form>\r\n    <p>\r\n        <span>Don't have an account?&nbsp;</span>\r\n        <a routerLink=\"/sign-up\">Sign up!</a>\r\n      </p>\r\n  </div>\r\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-2b4ae24cd3596fc9d49972a57d85e63b",
            "file": "src/app/components/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user",
                    "defaultValue": "new User()",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { User } from '../../models/user';\nimport { AppState, selectAuthState } from '../../store/app.states';\nimport { SignUp } from '../../store/actions/auth.actions';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit {\n\n  user: User = new User();\n  getState: Observable<any>;\n  errorMessage: string | null;\n\n  constructor(\n    private store: Store<AppState>\n  ) {\n     this.getState = this.store.select(selectAuthState);\n    }\n\n  ngOnInit() {\n    this.getState.subscribe((state) => {\n      if(state){\n        this.errorMessage = state.errorMessage;\n      }\n    });\n  }\n  onSubmit(): void {\n    const payload = {\n      email: this.user.email,\n      password: this.user.password\n    };\n    this.store.dispatch(new SignUp(payload));\n    \n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login {\r\n    width: 400px;\r\n    margin: 16px auto;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .login-header,\r\n  .login p {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n  }\r\n  \r\n  .login-header {\r\n    background: #28d;\r\n    padding: 20px;\r\n    font-size: 1.4em;\r\n    font-weight: normal;\r\n    text-align: center;\r\n    //text-transform: uppercase;\r\n    color: #fff;\r\n  }\r\n  \r\n  .login-container {\r\n    background: #ebebeb;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .login p {\r\n    padding: 12px;\r\n    padding-left: 0px;\r\n  }\r\n  \r\n  .login input {\r\n    box-sizing: border-box;\r\n    display: block;\r\n    width: 100%;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    padding: 16px;\r\n    outline: 0;\r\n    font-family: inherit;\r\n    font-size: 0.95em;\r\n  }\r\n  \r\n  .login input[type=\"text\"],\r\n  .login input[type=\"email\"],\r\n  .login input[type=\"password\"] {\r\n    background: #fff;\r\n    border-color: #bbb;\r\n    color: #555;\r\n  }\r\n  \r\n  .login input[type=\"text\"]:focus,\r\n  .login input[type=\"email\"]:focus,\r\n  .login input[type=\"password\"]:focus {\r\n    border-color: #888;\r\n  }\r\n  \r\n  .login input[type=\"submit\"] {\r\n    background: #28d;\r\n    border-color: transparent;\r\n    color: #fff;\r\n    font-size: 1em;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .login input[type=\"submit\"]:hover {\r\n    background: #17c;\r\n  }\r\n  \r\n  .login input[type=\"submit\"]:focus {\r\n    border-color: #05a;\r\n  }",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n  <div class=\"login\">\r\n    <h2 class=\"login-header\">Registration</h2>\r\n    <form class=\"login-container\" (ngSubmit)=\"onSubmit()\" ngNativeValidate>\r\n      <p>\r\n          <input \r\n          [(ngModel)]=\"user.email\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            required\r\n            placeholder=\"Enter Email\"\r\n            class=\"form-control\"\r\n            id=\"email\">\r\n        </p>\r\n      <p>\r\n          <input [(ngModel)]=\"user.password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          required\r\n          class=\"form-control\"\r\n          id=\"password\" placeholder=\"Enter Password\"></p>\r\n      <p><input type=\"submit\" area-label=\"singup\" tabindex=\"0\" value=\"SignUp\"></p>\r\n      <!-- <button type=\"submit\">Submit</button> -->\r\n      <a [routerLink]=\"['/']\" >Cancel</a>\r\n    </form>\r\n    <p>\r\n      <span>Already have an account?&nbsp;</span>\r\n      <a [routerLink]=\"['/log-in']\">Log in!</a>\r\n    </p>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddMusicComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "EditMusicComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LandingComponent"
                        },
                        {
                            "name": "ListMusicComponent"
                        },
                        {
                            "name": "LogInComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Add",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/Music/add-music/addMusic.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ADD_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/music.actions.ts",
                "type": "string",
                "defaultValue": "'[Musics] Add Success'"
            },
            {
                "name": "ADD_MUSICS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/music.actions.ts",
                "type": "string",
                "defaultValue": "'[Musics] Add Music'"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme-color.ts",
                "type": "Theme",
                "defaultValue": "{\r\n    name: 'dark',\r\n    properties: {\r\n      '--background-default': '#797C80',\r\n      '--primary-default': '#ffffff',\r\n      '--popup-default': '#000000',\r\n    }\r\n  }"
            },
            {
                "name": "DELETE_MUSIC_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/music.actions.ts",
                "type": "string",
                "defaultValue": "'[Music] Delete product success'"
            },
            {
                "name": "DELETE_MUSICS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/music.actions.ts",
                "type": "string",
                "defaultValue": "'[Musics] Delete Recipe'"
            },
            {
                "name": "Edit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/Music/edit-music/editMusic.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Edit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/Music/list-music/listMusic.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/header/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n    isAuthenticated: false,\r\n    user: null,\r\n    errorMessage: null\r\n  }"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/music.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n    musics: [],\r\n    user: null\r\n  \r\n}"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme-color.ts",
                "type": "Theme",
                "defaultValue": "{\r\n    name: 'light',\r\n    properties: {\r\n      '--background-default': '#F4FAFF',\r\n      '--primary-default': '#000000',\r\n      '--popup-default': '#000000',\r\n    }\r\n  }"
            },
            {
                "name": "List",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/landing/landing.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LIST_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/music.actions.ts",
                "type": "string",
                "defaultValue": "'[Musics] List Success'"
            },
            {
                "name": "LIST_MUSICS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/music.actions.ts",
                "type": "string",
                "defaultValue": "'[Musics] List Fetch'"
            },
            {
                "name": "Login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/log-in/login.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\r\n    auth: auth.reducer,\r\n    music:music.musicReducer\r\n  }"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectMusicState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('music')"
            },
            {
                "name": "SingUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/sign-up/signup.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/header/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  template: `<app-header></app-header>`,\r\n  styles: ['./app-header.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [HeaderComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/landing/landing.stories.ts",
                "type": "Story<LandingComponent>",
                "defaultValue": "(args: LandingComponent) => ({\r\n  component: LandingComponent,\r\n  template: `<app-landing></app-landing>`,\r\n  styles: ['./landing.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LandingComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/sign-up/signup.stories.ts",
                "type": "Story<SignUpComponent>",
                "defaultValue": "(args: SignUpComponent) => ({\r\n  component: SignUpComponent,\r\n  template: `<app-sign-up></app-sign-up>`,\r\n  styles: ['./app-sign-up.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [SignUpComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/log-in/login.stories.ts",
                "type": "Story<LogInComponent>",
                "defaultValue": "(args: LogInComponent) => ({\r\n  component: LogInComponent,\r\n  template: `<app-log-in></app-log-in>`,\r\n  styles: ['./app-log-in.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LogInComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/Music/edit-music/editMusic.stories.ts",
                "type": "Story<EditMusicComponent>",
                "defaultValue": "(args: EditMusicComponent) => ({\r\n  component: EditMusicComponent,\r\n  template: `<app-edit-music></app-edit-music>`,\r\n  styles: ['./app-edit-music.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [EditMusicComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/Music/add-music/addMusic.stories.ts",
                "type": "Story<AddMusicComponent>",
                "defaultValue": "(args: AddMusicComponent) => ({\r\n  component: AddMusicComponent,\r\n  template: `<app-add-music></app-add-music>`,\r\n  styles: ['./app-add-music.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [AddMusicComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/Music/list-music/listMusic.stories.ts",
                "type": "Story<ListMusicComponent>",
                "defaultValue": "(args: ListMusicComponent) => ({\r\n  component: ListMusicComponent,\r\n  template: `<app-list-music></app-list-music>`,\r\n  styles: ['./list-music.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [ListMusicComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "UPDATE_MUSIC_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/music.actions.ts",
                "type": "string",
                "defaultValue": "'[Music] Update product success'"
            },
            {
                "name": "UPDATE_MUSICS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/music.actions.ts",
                "type": "string",
                "defaultValue": "'[Musics] Update Recipe'"
            }
        ],
        "functions": [
            {
                "name": "musicReducer",
                "file": "src/app/store/reducers/music.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                "file": "src/app/store/actions/auth.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "MusicsActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ListMusics | ListDataSucess | AddMusics | AddSuccess | UpdateMusics | DeleteMusics | UpdateEditSuccess | DeleteMusicSuccess",
                "file": "src/app/store/actions/music.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Auth] Signup"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] Signup Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] Signup Failure"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Auth] Logout"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/auth.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/components/Music/add-music/addMusic.stories.ts": [
                {
                    "name": "Add",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/Music/add-music/addMusic.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/Music/add-music/addMusic.stories.ts",
                    "type": "Story<AddMusicComponent>",
                    "defaultValue": "(args: AddMusicComponent) => ({\r\n  component: AddMusicComponent,\r\n  template: `<app-add-music></app-add-music>`,\r\n  styles: ['./app-add-music.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [AddMusicComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/actions/music.actions.ts": [
                {
                    "name": "ADD_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/music.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Musics] Add Success'"
                },
                {
                    "name": "ADD_MUSICS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/music.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Musics] Add Music'"
                },
                {
                    "name": "DELETE_MUSIC_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/music.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Music] Delete product success'"
                },
                {
                    "name": "DELETE_MUSICS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/music.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Musics] Delete Recipe'"
                },
                {
                    "name": "LIST_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/music.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Musics] List Success'"
                },
                {
                    "name": "LIST_MUSICS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/music.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Musics] List Fetch'"
                },
                {
                    "name": "UPDATE_MUSIC_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/music.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Music] Update product success'"
                },
                {
                    "name": "UPDATE_MUSICS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/music.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Musics] Update Recipe'"
                }
            ],
            "src/app/theme-color.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme-color.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n    name: 'dark',\r\n    properties: {\r\n      '--background-default': '#797C80',\r\n      '--primary-default': '#ffffff',\r\n      '--popup-default': '#000000',\r\n    }\r\n  }"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme-color.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n    name: 'light',\r\n    properties: {\r\n      '--background-default': '#F4FAFF',\r\n      '--primary-default': '#000000',\r\n      '--popup-default': '#000000',\r\n    }\r\n  }"
                }
            ],
            "src/app/components/Music/edit-music/editMusic.stories.ts": [
                {
                    "name": "Edit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/Music/edit-music/editMusic.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/Music/edit-music/editMusic.stories.ts",
                    "type": "Story<EditMusicComponent>",
                    "defaultValue": "(args: EditMusicComponent) => ({\r\n  component: EditMusicComponent,\r\n  template: `<app-edit-music></app-edit-music>`,\r\n  styles: ['./app-edit-music.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [EditMusicComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/Music/list-music/listMusic.stories.ts": [
                {
                    "name": "Edit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/Music/list-music/listMusic.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/Music/list-music/listMusic.stories.ts",
                    "type": "Story<ListMusicComponent>",
                    "defaultValue": "(args: ListMusicComponent) => ({\r\n  component: ListMusicComponent,\r\n  template: `<app-list-music></app-list-music>`,\r\n  styles: ['./list-music.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [ListMusicComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/header/header.stories.ts": [
                {
                    "name": "Header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/header/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  template: `<app-header></app-header>`,\r\n  styles: ['./app-header.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [HeaderComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n    isAuthenticated: false,\r\n    user: null,\r\n    errorMessage: null\r\n  }"
                }
            ],
            "src/app/store/reducers/music.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/music.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n    musics: [],\r\n    user: null\r\n  \r\n}"
                }
            ],
            "src/app/components/landing/landing.stories.ts": [
                {
                    "name": "List",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/landing/landing.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/landing/landing.stories.ts",
                    "type": "Story<LandingComponent>",
                    "defaultValue": "(args: LandingComponent) => ({\r\n  component: LandingComponent,\r\n  template: `<app-landing></app-landing>`,\r\n  styles: ['./landing.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LandingComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/log-in/login.stories.ts": [
                {
                    "name": "Login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/log-in/login.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/log-in/login.stories.ts",
                    "type": "Story<LogInComponent>",
                    "defaultValue": "(args: LogInComponent) => ({\r\n  component: LogInComponent,\r\n  template: `<app-log-in></app-log-in>`,\r\n  styles: ['./app-log-in.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LogInComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/app.states.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    auth: auth.reducer,\r\n    music:music.musicReducer\r\n  }"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                },
                {
                    "name": "selectMusicState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('music')"
                }
            ],
            "src/app/components/sign-up/signup.stories.ts": [
                {
                    "name": "SingUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/sign-up/signup.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/sign-up/signup.stories.ts",
                    "type": "Story<SignUpComponent>",
                    "defaultValue": "(args: SignUpComponent) => ({\r\n  component: SignUpComponent,\r\n  template: `<app-sign-up></app-sign-up>`,\r\n  styles: ['./app-sign-up.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [SignUpComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/music.reducers.ts": [
                {
                    "name": "musicReducer",
                    "file": "src/app/store/reducers/music.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Auth] Signup"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] Signup Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] Signup Failure"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Auth] Logout"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/auth.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/actions/music.actions.ts": [
                {
                    "name": "MusicsActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ListMusics | ListDataSucess | AddMusics | AddSuccess | UpdateMusics | DeleteMusics | UpdateEditSuccess | DeleteMusicSuccess",
                    "file": "src/app/store/actions/music.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/canActivate.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CanActivateMusic",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Music/add-music/add-music.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMusicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Music/add-music/addMusic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Add",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Music/add-music/addMusic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Music/edit-music/edit-music.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditMusicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Music/edit-music/editMusic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Edit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Music/edit-music/editMusic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Music/list-music/list-music.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListMusicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Music/list-music/listMusic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Edit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Music/list-music/listMusic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/landing/landing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/landing/landing.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/landing/landing.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/log-in/log-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/log-in/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/log-in/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/signup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/signup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/music.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Music",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme-color.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusics",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusics",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListDataSucess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListMusics",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateEditSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusics",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_MUSICS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_MUSIC_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_MUSICS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_MUSICS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_MUSIC_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_MUSICS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMusicState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/music.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MusicEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/music.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/music.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "musicReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/music.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme-color.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Theme",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/theme-color.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme-color.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}